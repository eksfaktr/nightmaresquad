- Replace all shitty graphics
= Implement weight limit system
- REMEMBER, each item must have it's own inventory weight defined, but inherit from WeightItem

// Here's an example of a melee weapon pickup. The "Fake" pickup is the
// weapon icon you see on the ground. It's actually a complicated
// CustomInventory item that, when picked up, runs through a series of
// inventory checks and finally takes action by giving and taking
// inventory items to/from the player.

ACTOR FakeTaser : CustomInventory
{
	Radius 16
	Height 8
	Inventory.PickupMessage "" //Silence the "you got a pickup" message
	States
	{
	Spawn:
		KLAW ABCB 3
		Loop
	Pickup: // When the player touches the item...
		KLAW A 0 // first we check if the player already has a melee weapon
		KLAW A 0 A_JumpIfInventory("Slot1Filled",1,"NotPickup") // by looking for Slot1Filled.
		KLAW A 0 A_PlaySound("pickups/weapon") // Play the clicky noise.
		KLAW A 0 A_GiveInventory("Taser",1) // Give the player the actual weapon.
		KLAW A 0 A_TakeInventory("MartialArts",1) // The player can't use his fists with a melee weapon
		KLAW A 0 A_GiveInventory("Slot1Filled",1) // Flag the player as having a melee weapon.
		TNT1 A 0 A_Print("Picked up a Claw Taser.") // Displays the pickup message.
		Stop
	NotPickup:
		KLAW A 0
		KLAW A 1 ACS_Execute(666,0,11) // If the player already has a melee weapon, the message is
		Fail						  // still displayed but no action is taken by the pickup.
	}
}

// The "Dropped" item is actually a fake weapon icon that acts like a projectile until it hits
// something, likely a wall or a floor. It does no damage, and on death, it spawns the "fake"
// pickup for the player to pick up again.

ACTOR DroppedTaser
{
	PROJECTILE
	-NOGRAVITY
	Damage 0
	Radius 16
	Height 8
	Speed 9
	DeathSound "weapons/gundrop"
	States
	{
	Spawn:
		KLAW A 1
		Loop
	Death:
		KLAW A 0
		KLAW A 1 A_SpawnItem("FakeTaser",0,0,0,0)
		Stop
	}
}

// Here's the actual weapon.

ACTOR Taser : Weapon
{
   Weapon.SelectionOrder 180
   Weapon.Kickback 0
   DamageType Melee
   +NOAUTOFIRE
   +NOALERT
   States
   {
   Ready:
      TASR A 0 A_JumpIfInventory("IsDropping",1,"WeaponDrop") // We check if the player is hitting
      TASR A 1 A_WeaponReady								  // his DROP WEAPON key.
      Goto Ready
	WeaponDrop:
		TNT1 A 0
		TASR A 0 A_StopSoundEx("SoundSlot5") // Stop the electic noise.
		TNT1 A 1 A_TakeInventory("IsDropping",1) // Release the drop key.
		TNT1 A 0 A_TakeInventory("Slot1Filled",1) // Unflag Slot 1 so the player can get another melee weapon
		TNT1 A 0 A_FireCustomMissile("DroppedTaser",0,0,0) // Throw the weapon.
		TNT1 A 0 A_GiveInventory("MartialArts",1) // Give the player back his fists.
		TNT1 A 1 A_TakeInventory("Taser",1) // And the taser is now gone. Nothing will happen after this because
		Stop								// the weapon is no longer selected.
   Deselect:
      TASR A 0 A_StopSoundEx("SoundSlot5")
      TASR A 1 A_Lower
      Loop
   Select:
      TASR A 0 A_PlaySoundEx("taser/idle","SoundSlot5",1) // Neat electric arcing noise.
      TASR A 1 A_Raise
      Goto Select+1
   Fire:
      TASR B 3
	  TASR C 2 BRIGHT A_PlayWeaponSound("taser/attack")
	  TASR D 2 BRIGHT A_CustomPunch(5,1,0,"TaserPuff")
	  TASR BA 4
      Goto Ready
	  Altfire:
	  	TASR E 1 A_PlayWeaponSound("fist/miss")
		TASR F 1
		TASR G 8 A_CustomPunch(18,1,0,"FistPuff")
		TASR FE 3
		Goto Ready
		
	  }
}

// Every weapon has a unique ammo type.		

ACTOR GlockClip : Ammo
{
   Inventory.MaxAmount 12
   Inventory.Icon JDGPA0
}

ACTOR GlockAmmo : Ammo
{
   Inventory.MaxAmount 180
   Inventory.Icon CLIPA0
   States
   {
   Spawn:
   	CLIP A -1
	Loop
	}
}

ACTOR FakeGlock : CustomInventory replaces Clip
{
	Radius 16
	Height 8
	Inventory.PickupMessage ""
	States
	{
	Spawn:
		JDGP A -1
		Stop
	Pickup:
		JDGP A 0
		JDGP A 0 A_JumpIfInventory("Glock",1,"AmmoPickup") // If the player already has a Glock, they get more ammo for it
		JDGP A 0 A_JumpIfInventory("Slot2Filled",1,"NotPickup") // If the player has a different pistol, they get nothing
		JDGP A 0 A_PlaySound("pickups/weapon")
		JDGP A 0 A_GiveInventory("Glock",1)
		JDGP A 0 A_GiveInventory("Slot2Filled",1)
		TNT1 A 0 A_Print("Picked up a Judgment Mk.II A1.")
		JDGP A 1 ACS_Execute(666,0,21)
		Stop
	NotPickup:
		JDGP A 0
		JDGP A 1 ACS_Execute(666,0,21)
		Fail
	AmmoPickup:
		JDGP A 0
		JDGP A 0 A_JumpIfInventory("GlockAmmo",255,"AmmoFull")
		JDGP A 0 A_PlaySound("pickups/ammo")
		TNT1 A 0 A_Print("Picked up some 10mm pistol ammo.")
		JDGP A 1 A_GiveInventory("GlockAmmo",9)
		Stop
	AmmoFull:
		JDGP A 1
		Fail
	}
}

ACTOR DroppedGlock
{
	PROJECTILE
	-NOGRAVITY
	Damage 0
	Radius 16
	Height 8
	Speed 9
	DeathSound "weapons/gundrop"
	States
	{
	Spawn:
		JDGP A 1
		Loop
	Death:
		JDGP A 0
		JDGP A 1 A_SpawnItem("FakeGlock",0,0,0,0)
		Stop
	}
}

ACTOR Glock : Weapon
{
   //$Category NewWeapons
   Weapon.SelectionOrder 180
   Weapon.AmmoType1 "GlockClip"
   Weapon.AmmoUse1 1
   Weapon.AmmoType2 "GlockAmmo"
   Weapon.AmmoUse2 0
   Weapon.Kickback 40
   AttackSound "weapons/oldglockf"
   +AMMO_OPTIONAL
   +NOAUTOFIRE
   Decal BulletChip
   States
   {
   Ready:
      JDGG A 0 A_JumpIfInventory("IsDropping",1,"WeaponDrop")
	  JDGG A 0 A_JumpIfInventory("IsReloading",1,"Reload") // Checks for the RELOAD key.
      JDGG A 1 A_WeaponReady
      Goto Ready
	WeaponDrop:
		TNT1 A 0
		TNT1 A 1 A_TakeInventory("IsDropping",1)
		TNT1 A 0 A_TakeInventory("Slot2Filled",1)
		TNT1 A 0 A_FireCustomMissile("DroppedGlock",0,0,0)
		TNT1 A 1 A_TakeInventory("Glock",1)
		Stop
   Deselect:
      JDGG A 1 A_Lower
      Loop
   Select:
      JDGG A 1 A_Raise
      Loop
   Fire:
      JDGG A 0 A_JumpIfNoAmmo("DryFire") // Prevent the player firing if he's out of ammo
      JDGF B 1 BRIGHT A_FireBullets(4,2,-1,7.5,"DiazPuff",1)
	  JDGF C 1 BRIGHT A_FireCustomMissile("PistolSmokeSpawner",0,0,4,6)
      JDGG C 1 A_FireCustomMissile("PisCaseSpawn",-5,0,0,0)
	  JDGG ED 1 
      JDGG B 1 A_WeaponReady
      JDGG A 1 A_WeaponReady
      JDGG A 3 A_WeaponReady
      JDGG A 1
      Goto Ready
	DryFire:
		JDGG A 1 A_PlayWeaponSound("empty/pistol") // Play the clicky noise.
		JDGG A 5 // And go straight to Reload...
   Reload:
   JDGG A 1
      JDGG A 0 A_JumpIfInventory("GlockClip", 12, "Ready") // Is the clip already filled?
      JDGG A 0 A_JumpIfInventory("GlockAmmo", 1, 1) // Does the player have any extra bullets?
      Goto Ready
      JDGG A 0 // Play the reload animation.
	  JDGG C 1
      JDGR A 1 A_PlaySound("weapons/oldglockout")
      JDGR BCD 2
      JDGR D 4  A_FireCustomMissile("SpentClip1",0,0,4,6)
	  JDGR D 10
      JDGR EFGH 1
      JDGR I 1 A_PlaySound("weapons/oldglockin")
      JDGR JKLMNO 1
	  ReloadWorking:
      JDGG I 0 A_TakeInventory("GlockAmmo", 1) // Exchange one spare bullet...
      JDGG I 0 A_GiveInventory("GlockClip", 1) // ... for one bullet in the gun.
      JDGG I 0 A_JumpIfInventory("GlockClip",12,2) // Is the clip filled yet?
      JDGG I 0 A_JumpIfInventory("GlockAmmo",1,2) // Does the player still have ammo left to put in?
      JDGG I 0
      Goto ReloadFinish
      JDGG I 0
      Goto ReloadWorking
	  ReloadFinish:
      JDGC ABCD 1 // Finish the animation.
      JDGC E 1 A_PlaySound("weapons/oldglockcock")
      JDGC FGHIJKLMNO 1
      Goto Ready + 1
   }
}

// The "Once" item is used for weapons that the player doesn't start with.
// When you first get a specific weapon, you're given a couple extra clips worth
// of ammo. This should only happen once, or else players can cheat for more ammo
// by dropping an empty weapon and picking it back up.

ACTOR AutoPistolOnce : Inventory
{
	Inventory.MaxAmount 1
	-INVBAR
}